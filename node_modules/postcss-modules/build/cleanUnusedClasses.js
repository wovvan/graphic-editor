'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _getExports = require('./getExports');

var _getExports2 = _interopRequireDefault(_getExports);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getUniqueItem(value, index, self) {
  return self.indexOf(value) === index;
}

function getUsedClasses(css) {
  var exports = (0, _getExports2.default)(css);
  var classes = [];

  Object.keys(exports).forEach(function (exportedClass) {
    var classList = exports[exportedClass].split(' ');
    classes = [].concat(_toConsumableArray(classes), _toConsumableArray(classList));
  });

  return classes.filter(getUniqueItem);
}

function isGlobal(node) {
  var firstChild = node.nodes[0];
  if (!firstChild) return false;
  return firstChild.type === 'comment' && firstChild.text === 'global';
}

function cleanUnusedClasses(css) {
  var usedClasses = getUsedClasses(css);

  css.each(function (node) {
    if (!node.selector || node.selector.indexOf('.') !== 0) return;

    if (isGlobal(node)) {
      node.nodes[0].remove();
      return;
    }

    var nodeClass = node.selector.replace('.', '');
    var used = false;

    usedClasses.forEach(function (usedClass) {
      if (nodeClass.indexOf(usedClass) > -1) used = true;
    });

    if (!used) node.remove();
  });
}

exports.default = _postcss2.default.plugin('postcss-modules:cleanUnusedClasses', function () {
  return cleanUnusedClasses;
});